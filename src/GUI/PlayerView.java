/**
 *
 * @author jotaelediaz
 */
package GUI;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import napakalaki.CultistPlayer;
import napakalaki.Napakalaki;
import napakalaki.Player;
import napakalaki.Treasure;



public class PlayerView extends javax.swing.JPanel {
    
    public Player playerModel;
    private Napakalaki napakalakiModel;
   
    public void setNapakalaki(Napakalaki n) {
        napakalakiModel = n;
        repaint();
    }
    
    //Método que define el objeto de tipo Tesoro que se mostrará en la vista
    public void setPlayer (Player p) {
        
        playerModel = p;
        
        
        if (playerModel.getClass() == CultistPlayer.class) { // Si el jugador es sectario...
            cajaCultist.setVisible(true); // Mostramos su carta de sectario
            cajaCultist.setCultist( ((CultistPlayer)playerModel).getMyCultistCard() ); //Obtenemos los datos de sectario
        } else { // Si el jugador no es sectario...
            cajaCultist.setVisible(false); // Ocultamos la carta sectario
        }
        
        PName.setText( (playerModel.getName()) );
        PLevel.setText( Integer.toString(playerModel.getLevel()) );
        LCombatLevel.setText ( Integer.toString(playerModel.getCombatLevel()) );
        
        
        fillTreasurePanel (visibleTreasures, playerModel.getVisibleTreasures());
        fillTreasurePanel (hiddenTreasures, playerModel.getHiddenTreasures());
        
        
        repaint(); //Para que se reimprima el formulario con el tesoro.
        revalidate();
    }
    
    public void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
    
        // Se elimina la información antigua
        aPanel.removeAll();
        // Se recorre la lista de tesoros construyendo y añadiendo sus vistas al panel
        for (Treasure t : aList) {
            TreasureView aTreasureView = new TreasureView();
            aTreasureView.setTreasure (t);
            aTreasureView.setVisible (true);
            aPanel.add (aTreasureView);
        }

        // Se fuerza la actualización visual del panel
        aPanel.repaint();
        aPanel.revalidate();
        
    }
    
    
    public ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        // Se recorren los tesoros que contiene el panel, almacenando en un vector aquellos que están seleccionados.
        // Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        
        for (Component c : aPanel.getComponents()) {
                
            tv = (TreasureView) c;
            
            if ( tv.isSelected() ) { output.add (tv.getTreasure()); }
                
        }  
        
        return output;
    }
           
    public void activateBuyLevelsButton() { buyLevels.setEnabled(true); }
    public void activateMakeVisibleButton() { makeVisible.setEnabled(true); }
    public void deactivateBuyLevelsButton() { buyLevels.setEnabled(false); }
    public void deactivateMakeVisibleButton() { makeVisible.setEnabled(false); }
    public void cleanInfoJugador() { LCombatLevel.setText ( Integer.toString(playerModel.getCombatLevel()) ); Linfojugador.setText(""); }
    
    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PName = new javax.swing.JLabel();
        PLevel = new javax.swing.JLabel();
        buyLevels = new javax.swing.JButton();
        makeVisible = new javax.swing.JButton();
        DiscardTreasures = new javax.swing.JButton();
        Linfojugador = new javax.swing.JLabel();
        LCombatLevel = new javax.swing.JLabel();
        jSeparator = new javax.swing.JSeparator();
        LevelNameL = new javax.swing.JLabel();
        CombatLevelNameL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        hiddenTreasures = new javax.swing.JPanel();
        cajaCultist = new GUI.CultistView();
        jScrollPane2 = new javax.swing.JScrollPane();
        visibleTreasures = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(658, 575));
        setMinimumSize(new java.awt.Dimension(658, 575));
        setPreferredSize(new java.awt.Dimension(658, 575));
        setSize(new java.awt.Dimension(658, 575));
        setLayout(null);

        PName.setFont(new java.awt.Font("Ubuntu", 1, 20)); // NOI18N
        PName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        PName.setText("Nombre");
        PName.setToolTipText("");
        PName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(PName);
        PName.setBounds(10, 30, 620, 40);

        PLevel.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        PLevel.setText("0");
        add(PLevel);
        PLevel.setBounds(80, 100, 53, 29);

        buyLevels.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        buyLevels.setText("Comprar Niveles");
        buyLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyLevelsActionPerformed(evt);
            }
        });
        add(buyLevels);
        buyLevels.setBounds(20, 470, 190, 30);

        makeVisible.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        makeVisible.setText("Equipar Tesoros");
        makeVisible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeVisibleActionPerformed(evt);
            }
        });
        add(makeVisible);
        makeVisible.setBounds(430, 470, 190, 30);

        DiscardTreasures.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        DiscardTreasures.setText("Descartar Tesoros");
        DiscardTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscardTreasuresActionPerformed(evt);
            }
        });
        add(DiscardTreasures);
        DiscardTreasures.setBounds(230, 470, 180, 30);

        Linfojugador.setBackground(new java.awt.Color(255, 255, 255));
        Linfojugador.setFont(new java.awt.Font("Ubuntu", 0, 11)); // NOI18N
        Linfojugador.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Linfojugador.setAlignmentY(0.0F);
        add(Linfojugador);
        Linfojugador.setBounds(30, 510, 590, 20);

        LCombatLevel.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        LCombatLevel.setText("0");
        add(LCombatLevel);
        LCombatLevel.setBounds(600, 100, 30, 29);
        add(jSeparator);
        jSeparator.setBounds(10, 70, 620, 10);

        LevelNameL.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        LevelNameL.setText("Nivel:");
        add(LevelNameL);
        LevelNameL.setBounds(30, 110, 33, 16);

        CombatLevelNameL.setFont(new java.awt.Font("Ubuntu", 0, 13)); // NOI18N
        CombatLevelNameL.setText("Nivel de Combate:");
        add(CombatLevelNameL);
        CombatLevelNameL.setBounds(470, 110, 108, 16);

        jScrollPane1.setBackground(new java.awt.Color(238, 238, 238));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tesoros en tu mano", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 13))); // NOI18N

        hiddenTreasures.setAutoscrolls(true);
        hiddenTreasures.setMaximumSize(new java.awt.Dimension(50, 32767));
        hiddenTreasures.setLayout(new java.awt.GridLayout(4, 1, 10, 10));
        jScrollPane1.setViewportView(hiddenTreasures);

        add(jScrollPane1);
        jScrollPane1.setBounds(320, 160, 300, 300);

        cajaCultist.setBackground(new java.awt.Color(204, 204, 204));
        cajaCultist.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        add(cajaCultist);
        cajaCultist.setBounds(230, 90, 180, 50);

        jScrollPane2.setBackground(new java.awt.Color(238, 238, 238));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tesoros equipados", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Ubuntu", 0, 13))); // NOI18N

        visibleTreasures.setAutoscrolls(true);
        visibleTreasures.setMaximumSize(new java.awt.Dimension(50, 32767));
        /*
        visibleTreasures.setMinimumSize(new java.awt.Dimension(10, 30));
        visibleTreasures.setPreferredSize(new java.awt.Dimension(10, 30));
        */
        visibleTreasures.setLayout(null);
        visibleTreasures.setLayout(new java.awt.GridLayout(4, 1, 10, 10));
        jScrollPane2.setViewportView(visibleTreasures);

        add(jScrollPane2);
        jScrollPane2.setBounds(20, 160, 290, 300);
    }// </editor-fold>//GEN-END:initComponents

    private void buyLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyLevelsActionPerformed
        
        //Obtenemos la lista de los tesoros OCULTOS Y VISIBLES seleccionados por el jugador para comprar
        ArrayList<Treasure> selcompraHidden = getSelectedTreasures(hiddenTreasures);  
        ArrayList<Treasure> selcompraVisible = getSelectedTreasures(visibleTreasures);       
        
        if ( selcompraHidden.isEmpty() && selcompraVisible.isEmpty() ) {
            Linfojugador.setText("Debes seleccionar algún tesoro para comprar. (Cada nivel son 1000 piezas de oro)");
        
        } else {
            
            // Efectuamos la compra de niveles
            boolean haComprado = napakalakiModel.buyLevels(selcompraVisible,selcompraHidden);
        
            if(haComprado) {
                Linfojugador.setText("Compra de niveles realizada satisfactoriamente.");
            } else {
                Linfojugador.setText("No puedes comprar. No tienes suficientes monedas (1 nivel = 1.000) o si compras ahora ganarías la partida.");
            }
            
        }
        
        //Actualizamos la vista del jugador tras la compra de niveles
        setPlayer(napakalakiModel.getCurrentPlayer()); 
        
        repaint();
    }//GEN-LAST:event_buyLevelsActionPerformed

    private void makeVisibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeVisibleActionPerformed
        
        //Obtenemos la lista de los tesoros ocultos seleccionados por el jugador
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        
        // Le decimos a napakalakiModel que haga visibles los tesoros seleccionados.
        
        boolean canMakeVisible = napakalakiModel.makeTreasuresVisible(selHidden);
        
        if(!canMakeVisible) {
            Linfojugador.setText("No puedes equiparte con alguno de los tesoros seleccionados. Tienes ocupada esa parte del cuerpo.");
        } else {
            Linfojugador.setText("Tesoros equipados correctamente.");
        }
        
        //Actualizamos la vista con los nuevos tesoros equipados
        setPlayer(napakalakiModel.getCurrentPlayer()); 
        
        
        repaint();
    }//GEN-LAST:event_makeVisibleActionPerformed

    private void DiscardTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscardTreasuresActionPerformed
        
        //Obtenemos la lista de los visibles y ocultos seleccionados por el jugador
        ArrayList<Treasure> selVisible = getSelectedTreasures(visibleTreasures);
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        
        // Le decimos a napakalakiModel que descarte los tesoros seleccionados.
        napakalakiModel.discardVisibleTreasures(selVisible);
        napakalakiModel.discardHiddenTreasures(selHidden);
        
        Linfojugador.setText("Te has descartado correctamente.");
        
        //Actualizamos la vista tras descartar los tesoros
        setPlayer(napakalakiModel.getCurrentPlayer());
        
        
        repaint();
    }//GEN-LAST:event_DiscardTreasuresActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CombatLevelNameL;
    private javax.swing.JButton DiscardTreasures;
    private javax.swing.JLabel LCombatLevel;
    private javax.swing.JLabel LevelNameL;
    private javax.swing.JLabel Linfojugador;
    private javax.swing.JLabel PLevel;
    private javax.swing.JLabel PName;
    private javax.swing.JButton buyLevels;
    private GUI.CultistView cajaCultist;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JButton makeVisible;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
}
